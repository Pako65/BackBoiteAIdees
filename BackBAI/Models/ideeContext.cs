// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace BackBAI.Models;

public partial class ideeContext : DbContext
{
    public ideeContext()
    {
    }

    public ideeContext(DbContextOptions<ideeContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Category { get; set; }

    public virtual DbSet<Comment> Comment { get; set; }

    public virtual DbSet<Idea> Idea { get; set; }

    public virtual DbSet<Likes> Likes { get; set; }

    public virtual DbSet<Users> Users { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=boiteIdee;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__category__3213E83F29C1C2E9");

            entity.ToTable("category");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__comment__3213E83F7E95457F");

            entity.ToTable("comment");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.FkIdeaId).HasColumnName("fk_idea_id");
            entity.Property(e => e.FkUsersIdComment).HasColumnName("fk_users_id_comment");
            entity.Property(e => e.Text)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("text");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.FkIdea).WithMany(p => p.Comment)
                .HasForeignKey(d => d.FkIdeaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__comment__fk_idea__4222D4EF");

            entity.HasOne(d => d.FkUsersIdCommentNavigation).WithMany(p => p.Comment)
                .HasForeignKey(d => d.FkUsersIdComment)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__comment__fk_user__412EB0B6");
        });

        modelBuilder.Entity<Idea>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__idea__3213E83F0CFE3E90");

            entity.ToTable("idea");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.FkUsersId).HasColumnName("fk_users_id");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.FkUsers).WithMany(p => p.Idea)
                .HasForeignKey(d => d.FkUsersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__idea__fk_users_i__3B75D760");

            entity.HasMany(d => d.Category).WithMany(p => p.Idea)
                .UsingEntity<Dictionary<string, object>>(
                    "IdeaGetCategory",
                    r => r.HasOne<Category>().WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__idea_get___categ__48CFD27E"),
                    l => l.HasOne<Idea>().WithMany()
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__idea_get___idea___47DBAE45"),
                    j =>
                    {
                        j.HasKey("IdeaId", "CategoryId").HasName("PK__idea_get__97E8BA9342F3FE54");
                        j.ToTable("idea_get_category");
                        j.IndexerProperty<int>("IdeaId").HasColumnName("idea_id");
                        j.IndexerProperty<int>("CategoryId").HasColumnName("category_id");
                    });
        });

        modelBuilder.Entity<Likes>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("likes");

            entity.Property(e => e.FkIdeaIdLikes).HasColumnName("fk_idea_id_likes");
            entity.Property(e => e.FkUsersIdLikes).HasColumnName("fk_users_id_likes");

            entity.HasOne(d => d.FkIdeaIdLikesNavigation).WithMany()
                .HasForeignKey(d => d.FkIdeaIdLikes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__likes__fk_idea_i__44FF419A");

            entity.HasOne(d => d.FkUsersIdLikesNavigation).WithMany()
                .HasForeignKey(d => d.FkUsersIdLikes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__likes__fk_users___440B1D61");
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__users__3213E83FDBCDECFD");

            entity.ToTable("users");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Admin).HasColumnName("admin");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.Firstname)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("firstname");
            entity.Property(e => e.Lastname)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("lastname");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}