// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace BackBAI.Models;

public partial class ideeContext : DbContext
{
    public ideeContext(DbContextOptions<ideeContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Category { get; set; }

    public virtual DbSet<Comment> Comment { get; set; }

    public virtual DbSet<Idea> Idea { get; set; }

    public virtual DbSet<IdeaGetCategory> IdeaGetCategory { get; set; }

    public virtual DbSet<Likes> Likes { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__category__3213E83F2DBBD113");

            entity.ToTable("category");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__comment__3213E83FE2E54CED");

            entity.ToTable("comment");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("created_at");
            entity.Property(e => e.FkIdeaId).HasColumnName("fk_idea_id");
            entity.Property(e => e.FkUsersIdComment).HasColumnName("fk_users_id_comment");
            entity.Property(e => e.Text)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("text");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.FkIdea).WithMany(p => p.Comment)
                .HasForeignKey(d => d.FkIdeaId)
                .HasConstraintName("FK__comment__fk_idea__4222D4EF");

            entity.HasOne(d => d.FkUsersIdCommentNavigation).WithMany(p => p.Comment)
                .HasForeignKey(d => d.FkUsersIdComment)
                .HasConstraintName("FK__comment__fk_user__412EB0B6");
        });

        modelBuilder.Entity<Idea>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__idea__3213E83F3B746393");

            entity.ToTable("idea");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("created_at");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasColumnName("description");
            entity.Property(e => e.FkUsersId).HasColumnName("fk_users_id");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.FkUsers).WithMany(p => p.Idea)
                .HasForeignKey(d => d.FkUsersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__idea__fk_users_i__3B75D760");
        });

        modelBuilder.Entity<IdeaGetCategory>(entity =>
        {
            entity.HasKey(e => new { e.IdeaId, e.CategoryId }).HasName("PK__idea_get__97E8BA93B29F85E3");

            entity.ToTable("idea_get_category");

            entity.Property(e => e.IdeaId).HasColumnName("idea_id");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");

            entity.HasOne(d => d.Category).WithMany(p => p.IdeaGetCategory)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_category");

            entity.HasOne(d => d.Idea).WithMany(p => p.IdeaGetCategory)
                .HasForeignKey(d => d.IdeaId)
                .HasConstraintName("fk_idea_category");
        });

        modelBuilder.Entity<Likes>(entity =>
        {
            entity.HasKey(e => new { e.UsersId, e.IdeaId }).HasName("PK__likes__760C140B83817DD4");

            entity.ToTable("likes");

            entity.Property(e => e.UsersId).HasColumnName("users_id");
            entity.Property(e => e.IdeaId).HasColumnName("idea_id");

            entity.HasOne(d => d.Idea).WithMany(p => p.Likes)
                .HasForeignKey(d => d.IdeaId)
                .HasConstraintName("FK__likes__idea_id__45F365D3");

            entity.HasOne(d => d.Users).WithMany(p => p.Likes)
                .HasForeignKey(d => d.UsersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__likes__users_id__44FF419A");
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__users__3213E83F21D47E33");

            entity.ToTable("users");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Admin).HasColumnName("admin");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}